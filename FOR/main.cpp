#include<iostream>
using namespace std;

//#define FACTORIAL

void main()
{
	setlocale(LC_ALL, "");
	//for(;;) //while(true)
		//cout << "Hello FOR";;;;;;;;;;;;;;;;;;;;;;;;
#ifdef FACTORIAL


	int n; //  оличество итераций
	cout << "¬ведите количество итераций: "; cin >> n;
	float f = 1;
	for (int i = 1; i <= n; i++)
	{
		cout << i << "\t";
		f *= i;
		cout << f << endl;
	}
	cout << endl;
#endif // FACTORIAL

	for (int i = 0; i < 256; i++)
	{
		if (i % 16 == 0)cout << endl;
		cout << (char)i << " ";
	}
}

/*
for - это цикл на заданное число итераций.
for примен€етс€ в том случае, когда мы знаем сколько раз должен выполнитьс€ цикл.
for(counter; condition; expression)
{
.....;
group-of-statements;
.....;
}

counter - это счетчик цикла.
—четчик - это переменна€, котора€ считает сколько раз выполнилс€,
		  или будет выполнен цикл.
		  Ёта переменна€ может быть обь€влена как в самом цикле, так и перед ним.
		  ≈сли счетчик обь€влен в месте выражени€ counter, то он €вл€етс€ локальным
		  то есть, существует только в этом цикле и удал€етс€ из пам€ти по его завершении.
		  ≈сли счетчик обь€влен перед циклом, то он €вл. глобальным
		  по отношению к данному for и существует также после for, а for
		  лишь измен€ет значение счетчика. √лобальный счетчик будет примен€тьс€
		  в нескольких циклах.
counter - выполн€етс€ 1 раз перед первой итерацией

condition - это условие продолжение или завершени€ цикла.
¬ этом условии, как правило счетчик сравниваетс€ с каким-либо выражением.
≈сли условие равно true, то тело возвращаетс€.
”словие провер€етс€ перед каждой итерацией.

expression - это выражение, которое измен€ет счетчик.
			 ¬ этом выражении как правило пишут Increment/Decrement,
			 но здесь можно писать все что угодно.
expression отрабатывает после каждой итерации.

group-of-statements - это тело цикла, т.е. код, который нужно зациклить.
¬ теле цикла можно писать все что угодно.

int n = 5; //  оличество итераций
for (int i = 0; i < n; i++)
{
	cout << i << "\t";
}
cout << endl;
--------------------
≈сли не написать условие, for будет выполн€тьс€ бесконечно


*/